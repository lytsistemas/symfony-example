Como crear un proyecto symfony que tenga el módulo de seguridad, pagina de login y logout, 
una página para el rol de admin otra para el rol de usuario y otra para información general 
para la que no haga falta autenticarse

********************************************
**** PROYECTO BÁSICO CON CRUD EN USER ******
********************************************

symfony new symphonyWebApp --webapp
cd symphonyWebApp/
php bin/console make:entity User
php bin/console make:crud User
fichero .env --> DATABASE_URL="sqlite:///%kernel.project_dir%/var/data.db" 
symfony console doctrine:database:create
symfony console make:migration
symfony console doctrine:migrations:migrate
symphony console cache:clear
symfony server:start
http://127.0.0.1:8000/user


*************************************************
*********** PROYECTO COMPLETO V0.0.0 ************
*************************************************

symfony new symphonyWebApp --full -deprecated NO USAR
symfony new symphonyWebApp --webapp
cd symphonyWebApp/
php bin/console make:user

    The name of the security user class (e.g. User) [User]:
    > User

    Do you want to store user data in the database (via Doctrine)? (yes/no) [yes]:
     > yes

     Enter a property name that will be the unique "display" name for the user (e.g. email, username, uuid) [email]:
     > email

    Will this app need to hash/check user passwords? Choose No if passwords are not needed or will be checked/hashed by some other system (e.g. a single sign-on        server).

    Does this app need to hash/check user passwords? (yes/no) [yes]:
    > yes

    created: src/Entity/User.php
    created: src/Repository/UserRepository.php
    updated: src/Entity/User.php
    updated: config/packages/security.yaml

           
    Success! 
           

     Next Steps:
       - Review your new App\Entity\User class.
       - Use make:entity to add more fields to your User entity and then run make:migration.
       - Create a way to authenticate! See https://symfony.com/doc/current/security.html

fichero .env --> DATABASE_URL="sqlite:///%kernel.project_dir%/var/data.db" 

symfony console doctrine:database:create

    Created database ./symphonyWebApp/var/data.db for connection named default

symfony console make:migration

    created: migrations/Version20241229132813.php

           
    Success! 
           

    Review the new migration then run it with symfony console doctrine:migrations:migrate
    See https://symfony.com/doc/current/bundles/DoctrineMigrationsBundle/index.html


symfony console doctrine:migrations:migrate

     WARNING! You are about to execute a migration in database "main" that could result in schema changes and data loss. Are you sure you wish to continue?(yes/no)  [yes]:
     > yes

    [notice] Migrating up to DoctrineMigrations\Version20241229132813
    [notice] finished in 15.7ms, used 22M memory, 1 migrations executed, 6 sql queries
                                                                                                                            
     [OK] Successfully migrated to version: DoctrineMigrations\Version20241229132813                                        
                                                                                                                            
symfony console make:security:form-login


     Choose a name for the controller class (e.g. SecurityController) [SecurityController]:
     > SecurityController

     Do you want to generate a '/logout' URL? (yes/no) [yes]:
     > yes

     Do you want to generate PHPUnit tests? [Experimental] (yes/no) [no]:
     > no

     created: src/Controller/SecurityController.php
     created: templates/security/login.html.twig
     updated: config/packages/security.yaml

               
      Success! 
               

     Next: Review and adapt the login template: security/login.html.twig to suit your needs.


php bin/console make:registration-form

     Creating a registration form for App\Entity\User

     Do you want to add a #[UniqueEntity] validation attribute to your User class to make sure duplicate accounts aren't created? (yes/no) [yes]:
     > yes

     Do you want to send an email to verify the user's email address after registration? (yes/no) [yes]:
     > no

     Do you want to automatically authenticate the user after registration? (yes/no) [yes]:
     > yes

     Do you want to generate PHPUnit tests? [Experimental] (yes/no) [no]:
     > no

     updated: src/Entity/User.php
     created: src/Form/RegistrationFormType.php
     created: src/Controller/RegistrationController.php
     created: templates/registration/register.html.twig

               
      Success! 
               

     Next:
     Make any changes you need to the form, controller & template.

     Then open your browser, go to "/register" and enjoy your new form!

symfony console cache:clear
symfony server:start
http://127.0.0.1:8000/user


*************************************************
*********** PROYECTO COMPLETO V0.0.1 ************
*************************************************

// Muestra todas las rutas Url's del proyecto
php bin/console debug:router

// Genera el controlador principal
symfony console make:controller Main
symfony console make:controller Merber
symfony console make:controller Admin
symfony console make:crud User

class UserType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('email')
            ////////////////////////////////////////////////////
            ->add('roles', ChoiceType::class, [
                'choices' => [
                    'Admin' => 'ROLE_ADMIN',
                    'User' => 'ROLE_USER',
                ],
                'multiple' => true,
                'expanded' => false,
            //////////////////////////////////////////////////////
            ->add('password')
        ;
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => User::class,
        ]);
    }
}




Puesta en producción en contenedores docker:

1. Preparación y Configuración de Docker

    Docker Compose: El archivo docker-compose.yml o compose.yaml fue creado para definir los servicios que la aplicación necesita: base de datos PostgreSQL, la aplicación Symfony y Nginx como servidor web.

    Contenido del archivo docker-compose.yml:

    version: "3.8"
    services:
      database:
        image: postgres:16-alpine
        environment:
          POSTGRES_DB: ${POSTGRES_DB:-app}
          POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
          POSTGRES_USER: ${POSTGRES_USER:-app}
        healthcheck:
          test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-app}"]
          timeout: 5s
          retries: 5
          start_period: 60s
        volumes:
          - database_data:/var/lib/postgresql/data:rw

      app:
        build: .
        container_name: symfony_app
        restart: unless-stopped
        volumes:
          - .:/var/www/html
        environment:
          APP_ENV: prod
          DATABASE_URL: "postgresql://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD:-!ChangeMe!}@database:5432/${POSTGRES_DB:-app}"
        depends_on:
          database:
            condition: service_healthy

      nginx:
        image: nginx:latest
        container_name: symfony_nginx
        restart: unless-stopped
        ports:
          - "80:80"
        volumes:
          - .:/var/www/html
          - ./nginx.conf:/etc/nginx/nginx.conf
        depends_on:
          - app

    volumes:
      database_data:

        Este archivo configura tres contenedores: PostgreSQL, Symfony y Nginx.
        También se definen los volúmenes para persistir los datos de la base de datos y permitir que los archivos de la aplicación se actualicen dinámicamente dentro de los contenedores.

2. Archivo Dockerfile para la Aplicación Symfony

    Para crear la imagen Docker de la aplicación Symfony, creamos el archivo Dockerfile, que define cómo construir la imagen a partir de un contenedor base con PHP.

    Contenido del archivo Dockerfile:

    FROM php:8.1-fpm-alpine

    # Instalar dependencias
    RUN apk add --no-cache \
        libpng-dev \
        libjpeg-turbo-dev \
        libfreetype6-dev \
        zlib-dev \
        libzip-dev \
        postgresql-dev \
        bash \
        && docker-php-ext-configure gd --with-freetype --with-jpeg \
        && docker-php-ext-install gd zip pdo pdo_pgsql

    # Configuración de Composer
    COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

    WORKDIR /var/www/html

    # Copiar el proyecto al contenedor
    COPY . .

    # Instalar dependencias de Symfony
    RUN composer install --no-scripts --no-autoloader

    # Exponer puerto
    EXPOSE 9000
    CMD ["php-fpm"]

        Este archivo configura un contenedor para ejecutar PHP y Symfony, con las extensiones necesarias (como pdo_pgsql para PostgreSQL).
        También se instala Composer y se copia el código fuente de la aplicación al contenedor.

3. Configuración de Nginx

    Se creó un archivo nginx.conf para la configuración de Nginx, que sirve como proxy para la aplicación Symfony.

    Contenido del archivo nginx.conf:

    server {
        listen 80;
        server_name localhost;
        root /var/www/html/public;

        index index.php index.html index.htm;

        location / {
            try_files $uri /index.php$is_args$args;
        }

        location ~ ^/index.php(/|$) {
            fastcgi_pass symfony_app:9000;
            fastcgi_param SCRIPT_FILENAME /var/www/html/public/index.php;
            include fastcgi_params;
        }

        location ~ \.php$ {
            fastcgi_pass symfony_app:9000;
            fastcgi_param SCRIPT_FILENAME /var/www/html/public$fastcgi_script_name;
            include fastcgi_params;
        }

        error_log  /var/log/nginx/error.log;
        access_log /var/log/nginx/access.log;
    }

        Nginx está configurado para servir la aplicación desde el directorio public de Symfony.
        La configuración también incluye la conexión al contenedor de PHP (Symfony) a través de fastcgi_pass.

4. Subir los Contenedores

    Usaste el comando docker-compose up -d para levantar todos los servicios en segundo plano.

    docker-compose up -d

        Este comando descargó las imágenes necesarias y las ejecutó como contenedores.
        El contenedor de PostgreSQL se encargó de la base de datos, el contenedor de Symfony sirvió la aplicación y el contenedor de Nginx la distribuyó a través de HTTP.

5. Conexión a la Base de Datos PostgreSQL

    Conectaste al contenedor PostgreSQL utilizando el comando:

    docker exec -it symphonywebapp-database-1 bash
    psql -U app -d app

    Luego verificaste que la base de datos estaba configurada correctamente y ejecutaste las migraciones de Doctrine para PostgreSQL.

6. Migraciones y Ajustes en la Base de Datos

    Generaste nuevas migraciones adaptadas para PostgreSQL, ya que las migraciones previas para SQLite no eran compatibles con la nueva base de datos.

    docker exec -it symfony_app bash
    php bin/console doctrine:migrations:diff
    php bin/console doctrine:migrations:migrate

    Corregiste los problemas de migración, especialmente los relacionados con el uso de tipos de datos como AUTOINCREMENT en SQLite, que no son compatibles con PostgreSQL.

7. Verificación de la Aplicación en el Navegador

    Comprobaste que la aplicación funcionaba correctamente al acceder a ella a través de Nginx. Los cambios hechos en el código (CSS, JS, etc.) se reflejaban gracias a que los archivos de tu proyecto están montados como volumen dentro del contenedor.

8. Modificación y Recarga de Archivos Estáticos

    Modificaste archivos CSS y otros archivos estáticos en tu máquina local. Estos cambios se reflejan automáticamente en los contenedores gracias a la configuración de volúmenes en Docker Compose.

volumes:
  - .:/var/www/html

Si necesitabas recompilar los assets (CSS, JavaScript), ejecutaste el comando correspondiente dentro del contenedor Symfony para compilar los activos:

    docker exec -it symfony_app bash
    npm run dev  # o el comando adecuado para compilar los assets

    Recargaste la página en el navegador para ver los cambios reflejados.

Resumen Final

Con estos pasos, tu aplicación Symfony está funcionando dentro de Docker, con la base de datos PostgreSQL correctamente configurada y las migraciones ejecutadas. Además, puedes seguir modificando los archivos de la aplicación localmente y ver los cambios reflejados instantáneamente dentro del contenedor sin necesidad de reconstruir la imagen Docker.

Si necesitas hacer más cambios, como ajustar la configuración de Nginx, añadir nuevos servicios o gestionar nuevas migraciones, puedes hacerlo de forma sencilla siguiendo los mismos pasos.

¡Todo listo para seguir desarrollando y desplegando!



